<style>
  .frame-chat{
    min-height: 50vh;
  }
  
  .frame-box{
    height: 30em;
    overflow-y: scroll;
  }
  
  </style>

<div id='app' class="columns is-multiline is-centered">
  
  <!-- Room -->
  <div class="column is-3-desktop is-12-mobile">

    <button v-if="logout" class="button is-danger" @click="closeSesion">Cerrar sesión</button>

    <div class="card frame-chat">
      <div class="card-content">

        <h2 class="tag is-success is-size-4 has-text-weight-bold">Salas</h2>
        <hr>

        <button class="button is-info is-medium" @click="isModalActive=true">Crear sala</button>

        <hr>

        <div class="media" v-for='(chat,index) of chats' :key='`chat_${index}`'>

          <div class="media-left">
            <figure class="image is-48x48">
              <img class="is-rounded" :src="chat.image" alt="">
            </figure>
          </div>
          
          <div class="media-content">

            <a class="title is-4" @click="selectChat(chat.id)">{{ chat.name }}</a>
            <br>

            <p class="subtitle is-6">{{ chat.created_at}}</p>

            <button class="button is-small is-danger" @click='deleteRoom(chat.id)'>Borrar sala</button>
          </div>

        </div>

      </div>
    </div>
  </div>

  <!-- Chats -->
  <div class="column is-9-desktop is-12-mobile">
    <div class="card frame-chat">
      <div class="card-content">

        <h2 class="tag is-success is-size-4 has-text-weight-bold">Salas</h2>
        <hr>

        <!-- Cuerpo del chat -->
        <div id="chat-app" class="frame-box" v-if="currentChatId !== undefined">

          <!-- Comentarios -->
          <div v-for='(message, index) of messages' :key='`message-${index}`'>

            <span class="tag is-medium" :class="{'is-pulled-right is-success': (message.user_id == user_id), 'is-pulled-left is-link': (message.user_id != user_id)}">{{message.text}}</span>
            <br>
            <br>

          </div>
          
        </div>
        <div v-else>
          <p class="is-size-3 has-text-info">Selecciona una sala para iniciar</p>
        </div>
          
        <div class="field has-addons" v-if="currentChatId !== undefined">
          <div class="control is-expanded">

            <input v-model="text" class="input" type="text" placeholder="Escribe aquí" @keydown.enter='sendMessage'>
          
          </div>
          <div class="control">
            <button class="button is-info" @click='sendMessage'>
              Enviar
            </button>
          </div>
        </div>

      </div>
    </div>
  </div>
  
  <div class="modal" :class="{'is-active': isModalActive}">
    <div class="modal-background" @click="isModalActive=false"></div>
    <div class="modal-content">
      <div class="card">
        <div class="card-content">
          <form action="" @submit.prevent="createRoom">

            <div class="field">
              <label class="label" for="">Nombre</label>
              <div class="control">
                <input v-model='name' type="text" class="input" placeholder="Nombre interesante">
              </div>
            </div>

            <div class="field">
              <label class="label" for="">Descripcion</label>
              <div class="control">
                <input v-model='description' type="text" class="input" placeholder="Descripcion interesante">
              </div>
            </div>

            <div class="field">
              <label class="label" for="">Temática</label>
              <div class="control">
                <select v-model='topic'>
                  <option value="">Selecciona una temática</option>
                  <option value="magic">Magic</option>
                  <option value="code">Code</option>
                  <option value="games">Games</option>
                  <option value="random">Random</option>
                </select>
              </div>
            </div>

            <div class="field">
              <div class="control">
                <button class="button is-info">Crear sala</button>
              </div>
            </div>
        
            

          </form>
        </div>
      </div>
    </div>
    <button class="modal-close is-large" aria-label="close" @click="isModalActive=false"></button>
  </div>
 
</div>

<script src="/dependencies/sails.io.js"></script>
<script>

  const config = {
    header: {Authorization: "Bearer "+localStorage.getItem('token')}
  }

  const vue = new Vue({
    el:'#app',
    data: function(){
      return{
        //Tools - modales
        isModalActive: false,

        //Info chat
        logout: false,
        currentChatId: undefined,

        // CRUD Room
        name:'',
        description:'',
        image:'',
        topic:'', //['random','magic','games','code']
        room_id:'',

        //datos iniciales de la aplicacion
        user_id:0,
        text:'',
        chats:[],
        messages:[]
      }
    },

    created(){
      this.authValidation()
      this.fetch()
      this.user_id = new Date().getTime() + ''
      //let interval = setInterval(this.poolingChat, 1000)
      this.setSocket()
    },

    methods:{
      authValidation(){
        let token = localStorage.getItem('token')
        if (!token){
          window.location = '/'
        }else{
          axios.get('/auth/check',config)
          .then((res)=>{
            if (res.status != 200){
              window.location = '/'
            }
            this.logout = true
          })
        }
      },
      closeSesion(){
        localStorage.removeItem('token')
        window.location = '/'
      },
      setSocket(){
        let _ = this
        //Configuracion
        io.socket.on('message',(data) =>{
          
          if(data.room == this.currentChatId){
            _.getChat()
          }
        })
      },
      selectChat(chat_id){
        this.currentChatId = chat_id
        this.getChat()
      },
      getChat(){
        console.log('pulso')
        if (this.currentChatId != 'undefined'){
          axios.get(`/rooms/${this.currentChatId}/messages`, config)
            .then((result) => {
              this.messages = result.data
              //Alinear scroll
              let element = document.getElementById('chat-app')
              setTimeout(() => {
                element.scrollTop = element.scrollHeight
              },200)
            })
            .catch((err) => {
              console.log(err)
            })
        }
      },
      fetch(){
        axios.get('/rooms', config)
        .then((response) => {
          // handle success
          this.chats = response.data.map(chat => {
            return {
              id: chat.id,
              name: chat.name,
              image: chat.information.length > 0 ? chat.information.pop().image : 'none.jpg',
              created_at: chat.createdAt
            }
          })
        })
        .catch(function (error) {
          // handle error
          console.log(error);
        })
      },
      sendMessage(){
        if (this.currentChatId === undefined){
          alert('Selecciona un chat')
          return
        }

        let dataRoom = {
          text: this.text,
          user_id: this.user_id,
        }

        axios.post(`/rooms/${this.currentChatId}/messages`, dataRoom,config)
          .then((res) => {
            console.log('Elemento creado')
            this.text = ''
          })
          .catch((err) =>{
            console.log(err)
          })

        
      },

      deleteRoom(id){
        let confirmation = confirm('¿Deseas eliminar la sala?')
        if (confirmation) {
          axios.delete(`/rooms/${id}`,config)
          .then(() => {
            this.fetch()
            alert('La sala se ha eliminado')
          })
        }   
      },

      createRoom(){
        //Crear sala
        let dataRoom = {
          name: this.name
        }
        axios.post('/rooms', dataRoom,config)
          .then((res) => {
            let room_id = res.data.id

            //Crear informacion
            let dataInfo = {
              description: this.description,
              image: this.image,
              topic: this.topic
            }
            axios.post(`/rooms/${room_id}/informations`, dataInfo,config)
              .then(() => {
                this.isModalActive = false
                this.fetch()
              })
              .catch((err) => {
                console.log(err)
              }) 
          })
          .catch((err) => {
            console.log(err)
          }) 
        
        
      }
    }
  })

</script>